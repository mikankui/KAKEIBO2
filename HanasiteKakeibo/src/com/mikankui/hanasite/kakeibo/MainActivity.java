package com.mikankui.hanasite.kakeibo;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.TreeSet;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

import com.mikankui.hanasite.kakeibo.R;
import com.mikankui.hanasite.kakeibo.db.DbAdapter;
import com.mikankui.hanasite.kakeibo.db.MEISAI;
import com.mikankui.hanasite.kakeibo.graph.LineBarGraph;
import com.mikankui.hanasite.kakeibo.input.UpdateDbByLine;

/**
 * @author kentarokira
 * 
 */
public class MainActivity extends Activity implements OnClickListener {

	// 1?????????????????????????????????????????????
	private List<String> splitter;
	// ??????????????????????????????
	private ArrayList<Kakeibo> printKakeibo = new ArrayList<Kakeibo>();
	// ??????
	private String BR = System.getProperty("line.separator");
	// ??????????????????????????????
	EditText result;
	Spinner userName;
	DatePicker startDay;
	DatePicker endDay;
	EditText et_koumoku;
	Button BTN_DAY_SUM;
	Button BTN_DETAIL;
	Button BTN_GRAPH;
	// ????????????????????????
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	// DB
	private DbAdapter dbAdapter;
	// ?????????????????????
	ArrayList<GraphData> graph = new ArrayList<GraphData>();
	//
	private static final int ADLANTIS_HEIGHT = 50;

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		// addContentView(adlantis, adLantisParams);

		dbAdapter = new DbAdapter();

		result = (EditText) findViewById(R.id.multiAutoCompleteTextView1);
		setUserName();
		startDay = (DatePicker) findViewById(R.id.DP_START_DAY);
		endDay = (DatePicker) findViewById(R.id.DP_END_DAY);
		et_koumoku = (EditText) findViewById(R.id.ET_KOUMOKU);
		BTN_DAY_SUM = (Button) findViewById(R.id.BTN_DAY_SUM);
		BTN_DETAIL = (Button) findViewById(R.id.BTN_DETAIL);
		BTN_GRAPH = (Button) findViewById(R.id.BTN_GRAPH);
		BTN_DAY_SUM.setOnClickListener(this);
		BTN_DETAIL.setOnClickListener(this);
		BTN_GRAPH.setOnClickListener(this);

		// ????????????(Splite)????????????????????????
		setSplitter(" ", "　");

		// ????????????????????????

		if (Intent.ACTION_SEND_MULTIPLE.equals(getIntent().getAction())) {
			UpdateDbByLine udbl = new UpdateDbByLine();
			udbl.updateDb(getIntent(), splitter);

		} else {
		}

	};

	/**
	 * @param splitter
	 *            ?????????????????????
	 */
	public List<String> setSplitter(String... splitter) {
		this.splitter = new ArrayList<String>();
		for (String split : splitter) {
			this.splitter.add(split);
		}
		return this.splitter;
	}

	/**
	 * DB???????????????????????????????????????????????????
	 * 
	 * @param name
	 *            ????????????
	 * @param koumoku
	 *            ??????
	 * @param startDay
	 *            ?????????
	 * @param endDay
	 *            ?????????
	 */
	public void searchKakeibo(String name, String koumoku, String startDay,
			String endDay) {

		// ??????????????????????????????????????????
		printKakeibo.clear();
		Calendar sCal = Calendar.getInstance();
		Calendar eCal = Calendar.getInstance();

		// ??????????????????

		int syyyy = (InputDataCheck.parseYear(startDay));
		int sMM = (InputDataCheck.parseMonth(startDay));
		int sdd = (InputDataCheck.parseDay(startDay));
		int shh = 0;
		int smm = 0;

		// ??????????????????
		int eyyyy = (InputDataCheck.parseYear(endDay));
		int eMM = (InputDataCheck.parseMonth(endDay));
		int edd = (InputDataCheck.parseDay(endDay));
		int ehh = 23;
		int emm = 59;

		// ???????????????????????????
		sCal.set(syyyy, sMM, sdd, shh, smm, 0);
		eCal.set(eyyyy, eMM, edd, ehh, emm, 0);

		// DB???????????????????????????????????????
		Uri uri = Uri.parse("content://db/MEISAI");
		Cursor c = dbAdapter.query(uri, null, null, null, null);

		// ???????????????????????????????????????
		String dbName = "";
		String dbDate = "";
		String dbKoumoku = "";
		String dbCost = "";

		// ??????????????????????????????
		while (c.moveToNext()) {
			dbName = c.getString(2);
			dbDate = c.getString(1);
			dbKoumoku = c.getString(3);
			dbCost = c.getString(4);
			// DB?????????????????????????????????????????????????????????????????????????????????TRUE,
			// ??????????????????????????????????????????????????????TURE
			boolean koumokuFlag;
			if (koumoku.equals("*")) {
				koumokuFlag = true;
			} else {
				koumokuFlag = dbKoumoku.indexOf(koumoku) >= 0;
			}
			Kakeibo k = new Kakeibo(dbName, dbDate, dbKoumoku, dbCost);
			// ??????????????????????????????????????????
			if (k.getName().equals(name) && koumokuFlag
					&& k.getDay().after(sCal) && k.getDay().before(eCal)) {
				printKakeibo.add(k);
			}
		}
	}

	public void calcDay(String name, String startDay, String endDay) {

		// ??????????????????????????????????????????
		printKakeibo.clear();
		graph.clear();
		Calendar sCal = Calendar.getInstance();
		Calendar eCal = Calendar.getInstance();

		// ??????????????????

		int syyyy = (InputDataCheck.parseYear(startDay));
		int sMM = (InputDataCheck.parseMonth(startDay));
		int sdd = (InputDataCheck.parseDay(startDay));
		int shh = 0;
		int smm = 0;

		// ??????????????????
		int eyyyy = (InputDataCheck.parseYear(endDay));
		int eMM = (InputDataCheck.parseMonth(endDay));
		int edd = (InputDataCheck.parseDay(endDay));
		int ehh = 23;
		int emm = 59;

		// ???????????????????????????
		sCal.set(syyyy, sMM, sdd, shh, smm, 0);
		eCal.set(eyyyy, eMM, edd, ehh, emm, 0);

		// DB???????????????????????????????????????
		Uri uri = Uri.parse("content://db/MEISAI");
		String[] projection = { MEISAI.L_USER_NAME,
				"sum(" + MEISAI.L_COST + ")" };
		String selection = MEISAI.L_USER_NAME + "=? and "
				+ MEISAI.L_yyyyMMddhhmm + " between ? and ? ";
		String[] selectionArgs = new String[3];
		String groupBy = MEISAI.L_USER_NAME;
		String having = null;
		String orderBy = null;

		// ???????????????????????????????????????
		String dbName = "";
		String dbCost = "";
		String s = "*---------------------*" + BR;

		// ????????????
		selectionArgs[0] = name;
		int sum = 0;

		while (sCal.before(eCal)) {
			selectionArgs[1] = sdf.format(sCal.getTime());
			sCal.add(Calendar.DAY_OF_MONTH, 1);
			selectionArgs[2] = sdf.format(sCal.getTime());
			Cursor c = dbAdapter.queryraw(uri, projection, selection,
					selectionArgs, groupBy, having, orderBy);
			while (c.moveToNext()) {
				dbName = c.getString(0);
				dbCost = c.getString(1);
				sum = sum + Integer.valueOf(dbCost);
				s = s + selectionArgs[1].substring(0, 10) + " " + dbName + " "
						+ dbCost + BR;
				graph.add(new GraphData(dbName, sCal.getTime(), Integer
						.valueOf(dbCost)));
			}
		}
		result.setText("??????:" + sum + BR + s);
	}

	/**
	 * ??????????????????????????????????????????????????????DB?????????????????
	 * ?????????????Spineer?????????
	 */
	private void setUserName() {

		// DB?????????????????????????????????
		Uri uri = Uri.parse("content://db/MEISAI");
		try {
			Cursor c = dbAdapter.query(uri, null, null, null, null);
			// ?????????????????????????????????????????????Set???????????????
			TreeSet<String> uNameSet = new TreeSet<String>();
			while (c.moveToNext()) {
				uNameSet.add(c.getString(2));
			}

			// ?????????????????????Spinner???????????????List?????????
			ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
					android.R.layout.simple_spinner_item);
			adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			for (String s : uNameSet) {
				adapter.add(s);
			}

			userName = (Spinner) findViewById(R.id.SP_USERNAME);
			userName.setAdapter(adapter);
		} catch (Exception e) {
			Toast.makeText(this, "氏名へのセットに失敗しました", Toast.LENGTH_LONG).show();
		}

	}

	/**
	 * ?????????????????????
	 */
	private void print() {
		String s = "*---------------------*" + BR;
		int sum = 0;
		for (Kakeibo pk : printKakeibo) {
			if (check(pk.getCost())) {
				sum = sum + Integer.parseInt(pk.getCost());
				s = s + pk.print() + BR;
			}
		}
		result.setText("?????????" + sum + BR + s);
	}

	/**
	 * ???????????????????????????????????????????????????
	 * 
	 * @param s
	 *            ?????????????????????????????????
	 * @return
	 */
	private boolean check(String s) {
		try {
			Integer.parseInt(s);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
	}

	@SuppressLint("NewApi")
	@Override
	public void onClick(View v) {

		result.setText("");
		String sDay = startDay.getYear() + "/" + (startDay.getMonth() + 1)
				+ "/" + startDay.getDayOfMonth();
		String eDay = endDay.getYear() + "/" + (endDay.getMonth() + 1) + "/"
				+ endDay.getDayOfMonth();
		String uName = userName.getSelectedItem().toString();
		String koumoku = et_koumoku.getText().toString();

		switch (v.getId()) {
		case R.id.BTN_DAY_SUM:
			calcDay(uName, sDay, eDay);
			break;
		case R.id.BTN_DETAIL:
			// ??????????????????????????????????????????????????????
			if (koumoku.isEmpty())
				koumoku = "*";
			searchKakeibo(uName, koumoku, sDay, eDay);
			print();
			break;
		case R.id.BTN_GRAPH:
			if (graph.size() > 0) {
				Intent intent = new Intent(this, LineBarGraph.class);
				intent.setAction(Intent.ACTION_VIEW);
				intent.putExtra("data", graph);
				startActivity(intent);
			}
			break;
		}
	}
}
